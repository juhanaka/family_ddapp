#Table declarations

#Original table with input data

sentences(
  @distributed_by
  document_id text,
  sentence text,
  words text[],
  lemma text[],
  pos_tags text[],
  dependency_labels text[],
  dependency_parents int[],
  ner_tags text[],
  sentence_offset bigint,
  sentence_id text
  ).

#Tables to be filled during the run

sentences_processed(
  @distributed_by
  document_id text,
  sentence text,
  words text[],
  lemma text[],
  pos_tags text[],
  dependencies text[],
  ner_tags text[],
  sentence_offset bigint,
  sentence_id text
  ).

 sentences_filtered(
  @distributed_by
  document_id text,
  sentence text,
  words text[],
  lemma text[],
  pos_tags text[],
  dependencies text[],
  ner_tags text[],
  sentence_offset bigint,
  sentence_id text
  ).

 people_mentions(
  @distributed_by
  sentence_id text,
  start_position int,
  length int,
  text text,
  mention_id text
  ).

has_spouse(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint  
  ).

has_sibling(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text,
  id bigint
  ).

has_child(
  parent_id text,
  child_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint 
  ).

has_parent(
  child_id text,
  parent_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text,
  id bigint 
  ).

has_spouse_filtered(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint  
  ).

has_parent_filtered(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint  
  ).

has_child_filtered(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint  
  ).

has_sibling_filtered(
  person1_id text,
  person2_id text,
  @distributed_by
  sentence_id text,
  description text,
  is_true boolean,
  relation_id text, 
  id bigint  
  ).  

has_spouse_features(
  relation_id text,
  feature text).

has_sibling_features(
  relation_id text,
  feature text).

has_parent_features(
  relation_id text,
  feature text).

has_child_features(
  relation_id text,
  feature text).


# Extractions

#ext_process_dependencies
function process_dependencies over rows like process_dependencies_input
returns rows like sentences_processed
implementation "udf/ext_dependencies.py" handles tsv lines.

sentences_processed += process_dependencies(document_id, sentence, words, lemma, pos_tags, dependency_labels, dependency_parents, ner_tags, sentence_offset, sentence_id) :-
sentences(document_id, sentence, words, lemma, pos_tags, dependency_labels, dependency_parents, ner_tags, sentence_offset, sentence_id).

#ext_filter_bad_sentences
function filter_bad_sentences over rows like filter_bad_sentences_input
returns rows like sentences_filtered
implementation "udf/ext_sentence_filter.py" handles tsv lines.

sentences_filtered += filter_bad_sentences(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id) :-
sentences_processed(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).



#ext_people
function ext_people_candidates over rows like ext_people_candidates_input
returns rows like people_mentions
implementation "udf/ext_people.py" handles tsv lines.

people_mentions += ext_people_candidates(sentence_id, array_to_string(words, "~^~"), array_to_string(ner_tags, "~^~")) :-
sentences_filtered(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).


#Is using sentences_filtered here really useful ?

#ext_has_spouse_candidates
function ext_has_spouse_candidates over rows like ext_has_spouse_candidates_input
returns rows like has_spouse
implementation "udf/ext_has_spouse.py" handles tsv lines.

has_spouse += ext_has_spouse_candidates(sentence_id, p1_mention_id, p1_text, p2_mention_id, p2_text) :-
people_mentions(sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id), 
people_mentions(sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id), 
sentences_filtered(_, _, _, _, _, _, _, _, sentence_id), 
[p1_mention_id != p2_mention_id].

#ext_has_sibling_candidates
function ext_has_sibling_candidates over rows like ext_has_sibling_candidates_input
returns rows like has_sibling
implementation "udf/ext_has_sibling.py" handles tsv lines.

has_sibling += ext_has_sibling_candidates(sentence_id, p1_mention_id, p1_text, p2_mention_id, p2_text) :-
people_mentions(sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id), 
people_mentions(sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id), 
sentences_filtered(_, _, _, _, _, _, _, _, sentence_id), 
[p1_mention_id != p2_mention_id].

#ext_has_parent_candidates
function ext_has_parent_candidates over rows like ext_has_parent_candidates_input
returns rows like has_parent
implementation "udf/ext_has_parent.py" handles tsv lines.

has_parent += ext_has_parent_candidates(sentence_id, p1_mention_id, p1_text, p2_mention_id, p2_text) :-
people_mentions(sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id), 
people_mentions(sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id), 
sentences_filtered(_, _, _, _, _, _, _, _, sentence_id), 
[p1_mention_id != p2_mention_id].


#ext_has_child_candidates
function ext_has_child_candidates over rows like ext_has_child_candidates_input
returns rows like has_child
implementation "udf/ext_has_child.py" handles tsv lines.

has_child += ext_has_child_candidates(sentence_id, p1_mention_id, p1_text, p2_mention_id, p2_text) :-
people_mentions(sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id), 
people_mentions(sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id), 
sentences_filtered(_, _, _, _, _, _, _, _, sentence_id), 
[p1_mention_id != p2_mention_id].



#ext_filter_negative_examples
#In deepdive.conf

#From then, everything has to be done on has_relation_filtered !

#ext_filter_null_examples
#Not copied, the only interest of this rule seems to limit the number of candidates on which to run inferences, useless when run on raiders, we have enough capacity

#ext_has_spouse_features
function ext_has_spouse_features over rows like ext_has_spouse_features_input
returns rows like has_spouse_features
implementation "udf/ext_has_spouse_features.py" handles tsv lines.

has_spouse_features += ext_has_spouse_features(
					array_to_string(words, "~^~"),
                    array_to_string(lemma, "~^~"),
                    array_to_string(pos_tags, "~^~"),
                    array_to_string(dependencies, "~^~"),
                    array_to_string(ner_tags, "~^~"),
                    relation_id,
                    p1_start_position,
                    p1_length,
                    p2_start_position,
                    p2_length) :-
has_spouse_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id),
people_mentions(p1_sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id),
people_mentions(p2_sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id),
sentences_filtered(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).

#ext_has_parent_features
function ext_has_parent_features over rows like ext_has_parent_features_input
returns rows like has_parent_features
implementation "udf/ext_has_parent_features.py" handles tsv lines.

has_parent_features += ext_has_parent_features(
					array_to_string(words, "~^~"),
                    array_to_string(lemma, "~^~"),
                    array_to_string(pos_tags, "~^~"),
                    array_to_string(dependencies, "~^~"),
                    array_to_string(ner_tags, "~^~"),
                    relation_id,
                    p1_start_position,
                    p1_length,
                    p2_start_position,
                    p2_length) :-
has_parent_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id),
people_mentions(p1_sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id),
people_mentions(p2_sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id),
sentences_filtered(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).

#ext_has_child_features
function ext_has_child_features over rows like ext_has_child_features_input
returns rows like has_child_features
implementation "udf/ext_has_child_features.py" handles tsv lines.

has_child_features += ext_has_child_features(
					array_to_string(words, "~^~"),
                    array_to_string(lemma, "~^~"),
                    array_to_string(pos_tags, "~^~"),
                    array_to_string(dependencies, "~^~"),
                    array_to_string(ner_tags, "~^~"),
                    relation_id,
                    p1_start_position,
                    p1_length,
                    p2_start_position,
                    p2_length) :-
has_child_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id),
people_mentions(p1_sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id),
people_mentions(p2_sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id),
sentences_filtered(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).

#ext_has_sibling_features
function ext_has_sibling_features over rows like ext_has_sibling_features_input
returns rows like has_sibling_features
implementation "udf/ext_has_sibling_features.py" handles tsv lines.

has_sibling_features += ext_has_sibling_features(
					array_to_string(words, "~^~"),
                    array_to_string(lemma, "~^~"),
                    array_to_string(pos_tags, "~^~"),
                    array_to_string(dependencies, "~^~"),
                    array_to_string(ner_tags, "~^~"),
                    relation_id,
                    p1_start_position,
                    p1_length,
                    p2_start_position,
                    p2_length) :-
has_sibling_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id),
people_mentions(p1_sentence_id, p1_start_position, p1_length, p1_text, p1_mention_id),
people_mentions(p2_sentence_id, p2_start_position, p2_length, p2_text, p2_mention_id),
sentences_filtered(document_id, sentence, words, lemma, pos_tags, dependencies, ner_tags, sentence_offset, sentence_id).


##### Declare Variable Relations #####

has_parent_filtered_inference?(relation_id text).
has_spouse_filtered_inference?(relation_id text).
has_child_filtered_inference?(relation_id text).
has_sibling_filtered_inference?(relation_id text).

#### Supervision Rule #####

has_parent_filtered_inference(relation_id) = is_true :-
has_parent_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id).

has_spouse_filtered_inference(relation_id) = is_true :-
has_spouse_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id).

has_child_filtered_inference(relation_id) = is_true :-
has_child_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id).

has_sibling_filtered_inference(relation_id) = is_true :-
has_sibling_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id).


### INFERENCE RULES ###

#ParentIsTrue
@weight(feature)
has_parent_filtered_inference(relation_id) :-
	has_parent_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id), 
	has_parent_features(relation_id, feature).	

#ChildIsTrue
@weight(feature)
has_child_filtered_inference(relation_id) :-
	has_child_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id), 
	has_child_features(relation_id, feature).	

#SpouseIsTrue
@weight(feature)
has_spouse_filtered_inference(relation_id) :-
	has_spouse_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id), 
	has_spouse_features(relation_id, feature).

#SiblingIsTrue
@weight(feature)
has_sibling_filtered_inference(relation_id) :-
	has_sibling_filtered(p1_mention_id, p2_mention_id, sentence_id, description, is_true, relation_id, id), 
	has_sibling_features(relation_id, feature).	


#MutuallyExclusiveSiblingSpouse
@weight("5")
!has_sibling_filtered_inference(relation_sibling_id) v !has_spouse_filtered_inference(relation_spouse_id) :-
has_sibling_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_sibling_id, _), 
has_spouse_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_spouse_id, _).

#MutuallyExclusiveParentSpouse
@weight("5")
!has_parent_filtered_inference(relation_parent_id) v !has_spouse_filtered_inference(relation_spouse_id) :-
has_parent_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_parent_id, _), 
has_spouse_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_spouse_id, _).

#MutuallyExclusiveParentSibling
@weight("5")
!has_parent_filtered_inference(relation_parent_id) v !has_sibling_filtered_inference(relation_sibling_id) :-
has_parent_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_parent_id, _), 
has_sibling_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_sibling_id, _).

#MutuallyExclusiveParentChild
@weight("5")
!has_parent_filtered_inference(relation_parent_id) v !has_child_filtered_inference(relation_child_id) :-
has_parent_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_parent_id, _), 
has_child_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_child_id, _).

#MutuallyExclusiveSiblingChild
@weight("5")
!has_sibling_filtered_inference(relation_sibling_id) v !has_child_filtered_inference(relation_child_id) :-
has_sibling_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_sibling_id, _), 
has_child_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_child_id, _).

#MutuallyExclusiveSpouseChild
@weight("5")
!has_spouse_filtered_inference(relation_spouse_id) v !has_child_filtered_inference(relation_child_id) :-
has_spouse_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_spouse_id, _), 
has_child_filtered(p1_mention_id, p2_mention_id, _, _, _, relation_child_id, _).


