deepdive {

  # Regularization
  sampler.sampler_args: "-l 700 -s 1 -i 500 --alpha 0.1 --diminish 0.99 --reg_param 2"

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }


  pipeline.pipelines.preprocess_only: [
    "ext_clear_table_all", "ext_process_dependencies",
    "ext_filter_bad_sentences", "ext_people"
  ]

  pipeline.pipelines.filter_and_people: [
    "ext_filter_bad_sentences", "ext_people"
  ]

  pipeline.pipelines.candidates: [
    "ext_has_parent_candidates", "ext_has_spouse_candidates",
    "ext_has_sibling_candidates", "ext_filter_negative_examples"
  ]

  pipeline.pipelines.all_except_preprocess: [
    "ext_clear_table_all_except_preprocess", "ext_people", "ext_has_parent_candidates", "ext_has_spouse_candidates",
    "ext_has_sibling_candidates", "ext_filter_negative_examples", "ext_has_spouse_features", "ext_has_parent_features", "ext_has_sibling_features",
    "spouseFactor", "parentFactor", "siblingFactor"
  ]

  pipeline.pipelines.features_and_inference: [
    "ext_has_spouse_features", "ext_has_parent_features", "ext_has_sibling_features",
    "spouseFactor", "parentFactor", "siblingFactor"
  ]
  pipeline.pipelines.filter_nulls: ["ext_filter_null_examples"]

  #Choosing the pipeline to run
  pipeline.run: "features_and_inference"

    # Put your variables here
  schema.variables {
   has_parent.is_true: Boolean
   has_spouse.is_true: Boolean
   has_sibling.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {
    # Clean output tables of all extractors
    ext_clear_table_all {
        style: "sql_extractor"
        sql: """
        DELETE FROM sentences_processed;
        DELETE FROM sentences_filtered;
        DELETE FROM people_mentions;
        DELETE FROM has_spouse;
        DELETE FROM has_sibling;
        DELETE FROM has_parent;
        DELETE FROM has_spouse_features;
        DELETE FROM has_sibling_features;
        DELETE FROM has_parent_features;
        """
    }

    ext_clear_table_all_except_preprocess {
        style: "sql_extractor"
        sql: """
        DELETE FROM people_mentions;
        DELETE FROM has_spouse;
        DELETE FROM has_sibling;
        DELETE FROM has_parent;
        DELETE FROM has_spouse_features;
        DELETE FROM has_sibling_features;
        DELETE FROM has_parent_features;
        """
    }


    ext_process_dependencies {
        style: "json_extractor"
        input: """
        SELECT document_id,
                sentence,
                words,
                lemma,
                pos_tags,
                dependency_labels,
                dependency_parents,
                ner_tags,
                sentence_offset,
                sentence_id
        FROM sentences"""
        output_relation: "sentences_processed"
        udf: ${APP_HOME}"/udf/ext_dependencies.py"
        dependencies: ["ext_clear_table_all"]
    }

    ext_filter_bad_sentences {
        style: "json_extractor"
        input: """SELECT * FROM sentences_processed"""
        output_relation: "sentences_filtered"
        udf: ${APP_HOME}"/udf/ext_sentence_filter.py"
        dependencies: ["ext_process_dependencies"]
    }

    # Extractor 2: extract people mentions:
    ext_people {
        # The style of the extractor
        style: "tsv_extractor"
        # An input to the extractor is a row (tuple) of the following query:
        input: """
        SELECT  sentence_id,
                array_to_string(words, '~^~'),
                array_to_string(ner_tags, '~^~')
            FROM  sentences_filtered"""
        # output of extractor will be written to this table:
        output_relation: "people_mentions"
        # This user-defined function will be performed on each row (tuple) of input query:
        udf: ${APP_HOME}"/udf/ext_people.py"
        dependencies: ["ext_process_dependencies", "ext_clear_table_all_except_sentences_processed", "ext_filter_bad_sentences"]
    }

    # Extractor 3: extract relationships:
    ext_has_spouse_candidates {
      # The style of the extractor
      style: tsv_extractor
      # Each input (p1, p2) is a pair of mentions
      input: """
        SELECT  sentences_filtered.sentence_id,
                p1.mention_id AS p1_mention_id,
                p1.text       AS p1_text,
                p2.mention_id AS p2_mention_id,
                p2.text       AS p2_text
         FROM   people_mentions p1,
                people_mentions p2,
                sentences_filtered
        WHERE   p1.sentence_id = p2.sentence_id
          AND   p1.sentence_id = sentences_filtered.sentence_id
          AND   p1.mention_id != p2.mention_id;
          """
      output_relation : "has_spouse"
      udf             : ${APP_HOME}"/udf/ext_has_spouse.py"

      # Run this extractor after "ext_people"
      dependencies    : ["ext_people"]
    }

    ext_has_sibling_candidates {
      # The style of the extractor
      style: tsv_extractor
      # Each input (p1, p2) is a pair of mentions
      input: """
        SELECT  sentences_filtered.sentence_id,
                p1.mention_id AS p1_mention_id,
                p1.text       AS p1_text,
                p2.mention_id AS p2_mention_id,
                p2.text       AS p2_text
         FROM   people_mentions p1,
                people_mentions p2,
                sentences_filtered
        WHERE   p1.sentence_id = p2.sentence_id
          AND   p1.sentence_id = sentences_filtered.sentence_id
          AND   p1.mention_id != p2.mention_id;
          """
      output_relation : "has_sibling"
      udf             : ${APP_HOME}"/udf/ext_has_sibling.py"

      # Run this extractor after "ext_people"
      dependencies    : ["ext_people"]
    }

    ext_has_parent_candidates {
      # The style of the extractor
      style: tsv_extractor
      # Each input (p1, p2) is a pair of mentions
      input: """
        SELECT  sentences_filtered.sentence_id,
                p1.mention_id AS p1_mention_id,
                p1.text       AS p1_text,
                p2.mention_id AS p2_mention_id,
                p2.text       AS p2_text
         FROM   people_mentions p1,
                people_mentions p2,
                sentences_filtered
        WHERE   p1.sentence_id = p2.sentence_id
          AND   p1.sentence_id = sentences_filtered.sentence_id
          AND   p1.mention_id != p2.mention_id;
          """
      output_relation : "has_parent"
      udf             : ${APP_HOME}"/udf/ext_has_parent.py"

      # Run this extractor after "ext_people"
      dependencies    : ["ext_people"]
    }

    ext_filter_negative_examples {
      style: "sql_extractor"
      sql: """
        DROP TABLE IF EXISTS has_spouse_sampled;
        DROP TABLE IF EXISTS has_sibling_sampled;
        DROP TABLE IF EXISTS has_parent_sampled;

        CREATE TABLE has_spouse_sampled AS SELECT * FROM has_spouse
        WHERE is_true = 'f' ORDER BY random() LIMIT 3000;
        CREATE TABLE has_sibling_sampled AS SELECT * FROM has_sibling
        WHERE is_true = 'f' ORDER BY random() LIMIT 3000;
        CREATE TABLE has_parent_sampled AS SELECT * FROM has_parent
        WHERE is_true = 'f' ORDER BY random() LIMIT 3000;

        INSERT INTO has_spouse_sampled SELECT * FROM has_spouse WHERE is_true = 't' OR is_true IS NULL;
        INSERT INTO has_sibling_sampled SELECT * FROM has_sibling WHERE is_true = 't' OR is_true IS NULL;
        INSERT INTO has_parent_sampled SELECT * FROM has_parent WHERE is_true = 't' OR is_true IS NULL;

        DELETE FROM has_spouse;
        INSERT INTO has_spouse SELECT * FROM has_spouse_sampled;
        DROP TABLE has_spouse_sampled;
        DELETE FROM has_sibling;
        INSERT INTO has_sibling SELECT * FROM has_sibling_sampled;
        DROP TABLE has_sibling_sampled;
        DELETE FROM has_parent;
        INSERT INTO has_parent SELECT * FROM has_parent_sampled;
        DROP TABLE has_parent_sampled;
      """
      dependencies: ["ext_has_spouse_candidates", "ext_has_sibling_candidates", "ext_has_parent_candidates"]
    }

    ext_filter_null_examples {
      style: "sql_extractor"
      sql: """
        DROP TABLE IF EXISTS has_spouse_sampled;
        DROP TABLE IF EXISTS has_sibling_sampled;
        DROP TABLE IF EXISTS has_parent_sampled;

        CREATE TABLE has_spouse_sampled AS SELECT * FROM has_spouse
        WHERE is_true IS NULL ORDER BY random() LIMIT 50000;
        CREATE TABLE has_sibling_sampled AS SELECT * FROM has_sibling
        WHERE is_true IS NULL ORDER BY random() LIMIT 50000;
        CREATE TABLE has_parent_sampled AS SELECT * FROM has_parent
        WHERE is_true IS NULL ORDER BY random() LIMIT 50000;

        INSERT INTO has_spouse_sampled SELECT * FROM has_spouse WHERE is_true IS NOT NULL;
        INSERT INTO has_sibling_sampled SELECT * FROM has_sibling WHERE is_true IS NOT NULL;
        INSERT INTO has_parent_sampled SELECT * FROM has_parent WHERE is_true IS NOT NULL;

        DELETE FROM has_spouse;
        INSERT INTO has_spouse SELECT * FROM has_spouse_sampled;
        DROP TABLE has_spouse_sampled;
        DELETE FROM has_sibling;
        INSERT INTO has_sibling SELECT * FROM has_sibling_sampled;
        DROP TABLE has_sibling_sampled;
        DELETE FROM has_parent;
        INSERT INTO has_parent SELECT * FROM has_parent_sampled;
        DROP TABLE has_parent_sampled;
      """
      dependencies: ["ext_has_spouse_candidates", "ext_has_sibling_candidates", "ext_has_parent_candidates"]
    }

    #Extractors 4: extract features for relation candidates
    ext_has_spouse_features {
      style: "tsv_extractor"
      input: """
            SELECT  array_to_string(words, '~^~'),
                    array_to_string(lemma, '~^~'),
                    array_to_string(pos_tags, '~^~'),
                    array_to_string(dependencies, '~^~'),
                    array_to_string(ner_tags, '~^~'),
                    has_spouse.relation_id,
                    p1.start_position,
                    p1.length,
                    p2.start_position,
                    p2.length
            FROM    has_spouse,
                    people_mentions p1,
                    people_mentions p2,
                    sentences_filtered
            WHERE   has_spouse.person1_id = p1.mention_id
              AND   has_spouse.person2_id = p2.mention_id
              AND   has_spouse.sentence_id = sentences_filtered.sentence_id;
           """
      output_relation : "has_spouse_features"
      udf             : ${APP_HOME}"/udf/ext_has_spouse_features.py"
      dependencies    : ["ext_has_spouse_candidates", "ext_filter_negative_examples"]
      parallelism: 4
    }

    ext_has_sibling_features {
      style: "tsv_extractor"
      input: """
            SELECT  array_to_string(words, '~^~'),
                    array_to_string(lemma, '~^~'),
                    array_to_string(pos_tags, '~^~'),
                    array_to_string(dependencies, '~^~'),
                    array_to_string(ner_tags, '~^~'),
                    has_sibling.relation_id,
                    p1.start_position,
                    p1.length,
                    p2.start_position,
                    p2.length
            FROM    has_sibling,
                    people_mentions p1,
                    people_mentions p2,
                    sentences_filtered
            WHERE   has_sibling.person1_id = p1.mention_id
              AND   has_sibling.person2_id = p2.mention_id
              AND   has_sibling.sentence_id = sentences_filtered.sentence_id;
           """
      output_relation : "has_sibling_features"
      udf             : ${APP_HOME}"/udf/ext_has_sibling_features.py"
      dependencies    : ["ext_has_sibling_candidates", "ext_filter_negative_examples"]
      parallelism: 4
    }

    ext_has_parent_features {
      style: "tsv_extractor"
      input: """
            SELECT  array_to_string(words, '~^~'),
                    array_to_string(lemma, '~^~'),
                    array_to_string(pos_tags, '~^~'),
                    array_to_string(dependencies, '~^~'),
                    array_to_string(ner_tags, '~^~'),
                    has_parent.relation_id,
                    p1.start_position,
                    p1.length,
                    p2.start_position,
                    p2.length
            FROM    has_parent,
                    people_mentions p1,
                    people_mentions p2,
                    sentences_filtered
            WHERE   has_parent.child_id = p1.mention_id
              AND   has_parent.parent_id = p2.mention_id
              AND   has_parent.sentence_id = sentences_filtered.sentence_id;
           """
      output_relation : "has_parent_features"
      udf             : ${APP_HOME}"/udf/ext_has_parent_features.py"
      dependencies    : ["ext_has_parent_candidates", "ext_filter_negative_examples"]
      parallelism: 4
    }
  }

  # Put your inference rules here
  inference.factors {
    spouseFactor{
      input_query: """
        SELECT has_spouse.id AS "has_spouse.id",
               has_spouse.is_true AS "has_spouse.is_true",
               feature
        FROM has_spouse,
             has_spouse_features
        WHERE has_spouse.relation_id = has_spouse_features.relation_id
        """
      function : "IsTrue(has_spouse.is_true)"
      weight : "?(feature)"
    }

    parentFactor{
      input_query: """
        SELECT has_parent.id AS "has_parent.id",
               has_parent.is_true AS "has_parent.is_true",
               feature
        FROM has_parent,
             has_parent_features
        WHERE has_parent.relation_id = has_parent_features.relation_id
        """
      function : "IsTrue(has_parent.is_true)"
      weight : "?(feature)"
    }

    siblingFactor{
      input_query: """
        SELECT has_sibling.id AS "has_sibling.id",
               has_sibling.is_true AS "has_sibling.is_true",
               feature
        FROM has_sibling,
             has_sibling_features
        WHERE has_sibling.relation_id = has_sibling_features.relation_id
        """
      function : "IsTrue(has_sibling.is_true)"
      weight : "?(feature)"
    }
  }
  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25
}
