deepdive {
  
  db.default {
    driver: "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    chunking_candidates.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

  # Clean output tables of all extractors
    ext_clear_table_all {
        style: "sql_extractor"
        sql: """
        DELETE FROM chunking_candidates;
        DELETE FROM chunking_candidates_final;
        """
    }

    ext_clear_chunking_final {
        style: "sql_extractor"
        sql: """
        DELETE FROM chunking_candidates_final;
        """
    }

    #remove the test from sentences_filtered

    ext_pronoun_candidates {
        style: "tsv_extractor"
        input: """
        SELECT s_pronoun.document_id,
               array_to_string(s_pronoun.words, '~^~'),
               s_pronoun.sentence_offset,
               s_pronoun.sentence_id, 
               p.sentence_id, 
               p.start_position, 
               p.length, 
               p.text, 
               p.mention_id, 
               array_to_string(s_people.ner_tags, '~^~'),
               array_to_string(s_people.words, '~^~'),
               array_to_string(s_pronoun.ner_tags, '~^~')
        FROM sentences_filtered s_pronoun, 
             sentences_filtered s_people,
             people_mentions p
        WHERE s_people.sentence_id = p.sentence_id
        AND   s_pronoun.sentence_offset = s_people.sentence_offset + 1
        AND   s_pronoun.document_id= s_people.document_id;
        """
        output_relation: "chunking_candidates"
        udf: ${APP_HOME}"/udf/ext_pronoun.py"
        dependencies: ["ext_clear_table_all"]
    }

    ext_pronoun_candidates_final {
        style: "tsv_extractor"
        input: """
        SELECT *
        FROM  chunking_candidates cand
        WHERE cand.is_true='true'
        limit 200;
        """
        output_relation: "chunking_candidates_final"
        udf: ${APP_HOME}"/udf/ext_pronoun_final.py"
        dependencies: ["ext_pronoun_candidates"]
    }

    ext_pronoun_features {
      style: "tsv_extractor"
      input: """
            SELECT  *
            FROM    chunking_candidates c;
            """
      output_relation : "chunking_features"
      udf             : ${APP_HOME}"/udf/ext_pronoun_features.py"
      dependencies    : ["ext_pronoun_candidates", "ext_pronoun_candidates_final"]
      parallelism: 4
    }

  }

  # Put your inference rules here
  inference.factors {

#    factor_feature {
#      input_query: """select words.id as "words.id", words.tag as "words.tag", word_features.feature as "feature" 
#        from words, word_features 
#        where words.word_id = word_features.word_id and words.word is not null"""
#      function: "Multinomial(words.tag)"
#      weight: "?(feature)"
#    }
#
#    factor_linear_chain_crf {
#      input_query: """select w1.id as "words.w1.id", w2.id as "words.w2.id", w1.tag as "words.w1.tag", w2.tag as "words.w2.tag"
#        from words w1, words w2
#        where w2.word_id = w1.word_id + 1"""
#      function: "Multinomial(words.w1.tag, words.w2.tag)"
#      weight: "?"
#    }
#
#    factor_skip_chain_crf {
#      input_query: """select *
#      from
#        (select w1.id as "words.w1.id", w2.id as "words.w2.id", w1.tag as "words.w1.tag", w2.tag as "words.w2.tag",
#          row_number() over (partition by w1.id) as rn
#        from words w1, words w2
#        where w1.tag is not null and w1.sent_id = w2.sent_id and w1.word = w2.word and w1.id < w2.id) scrf
#      where scrf.rn = 1""" 
#      function: "Multinomial(words.w1.tag, words.w2.tag)"
#      weight: "?"
#    }


  } 

  pipeline.run: "ext"

  pipeline.pipelines.ext: [
  "ext_clear_table_all", "ext_pronoun_candidates"
  ]

  pipeline.pipelines.chunking2: [
  "ext_clear_chunking_final", "ext_pronoun_candidates_final"
  ]

  pipeline.pipelines.inference: ["factor_feature", "factor_linear_chain_crf", "factor_skip_chain_crf"]

  # Specify a holdout fraction
  #calibration.holdout_fraction: 0.25


}
